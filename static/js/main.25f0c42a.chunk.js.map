{"version":3,"sources":["components/ChatApp/Header.js","store/message/reducer.js","store/user/reducer.js","components/ChatApp/Main/InputControl.js","store/message/action.js","store/user/selector.js","components/ChatApp/Main/MessageItem.js","components/ChatApp/Main/ListMessage.js","components/ChatApp/Main/ChatBoard.js","components/ChatApp/Main/ListUser.js","components/ChatApp/Main/Main.js","components/ChatApp/ChatApp.js","components/LoginForm.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["Header","bg","justifyContent","alignItems","p","fontSize","align","fontWeight","to","mr","initialState","messages","id","uuidv4","message","createAt","moment","Date","format","userID","messageSlice","createSlice","name","reducers","addMessage","state","action","payload","myID","newMessage","actions","userSlice","users","userSelected","setSelectedUser","InputControl","selectedUser","useSelector","user","useState","inputData","setInputData","dispatch","useDispatch","handleSend","getState","sendMessage","useEffect","mt","w","onChange","onEnter","e","value","type","m","borderRadius","_focus","boxShadow","onClick","size","MessageItem","map","mes","flexDir","alignSelf","color","ListMessage","ref","useRef","current","scrollIntoView","h","border","borderColor","flexDirection","overflowY","ChatBoard","ListUser","handleSelectUser","currentTarget","console","log","Object","values","mb","Main","ChatApp","forms","LoginForm","boxSize","form","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","messageReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25f0c42a.chunk.js","sourcesContent":["import { Flex,Text,Button } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return ( \r\n            <Flex bg='blue.200' justifyContent='space-between' alignItems='center' p='.5em 0'>\r\n                <Flex />\r\n                <Flex>\r\n                    <Text fontSize='2em' align='center' fontWeight='bold' > Chat App</Text>\r\n                </Flex>\r\n                <Flex>\r\n                   <Link to='/login'> <Button mr='2em'> Login </Button> </Link>\r\n                </Flex>\r\n            </Flex>\r\n     );\r\n}\r\n \r\nexport default Header;","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport moment from \"moment\"\r\n\r\nconst initialState = {\r\n    messages: {\r\n        1: [{\r\n            id: uuidv4(),\r\n            message: 'OK con de',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 1\r\n        }],\r\n        2: [{\r\n            id: uuidv4(),\r\n            message: 'hello AAASSS',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 2\r\n        }],\r\n        3: [{\r\n            id: uuidv4(),\r\n            message: 'TESTINGGGGGG',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 3\r\n        }]\r\n    }\r\n}\r\n\r\nexport const messageSlice = createSlice({\r\n    name: \"message\",\r\n    initialState,\r\n    reducers: {\r\n        addMessage: (state,action) => {\r\n            const { userID, myID, message } = action.payload\r\n            const newMessage = {\r\n                id: uuidv4(),\r\n                message: message,\r\n                createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                userID: myID\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [userID]: [...state.messages[userID], newMessage]\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addMessage } = messageSlice.actions\r\nexport default messageSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n    users: {\r\n        1: {\r\n            id: 1,\r\n            name: 'Nam',\r\n        },\r\n        2: {\r\n            id: 2,\r\n            name: 'Hoang',\r\n        },\r\n        3: {\r\n            id: 3,\r\n            name: 'Tuyet',\r\n        },\r\n    },\r\n    userSelected: null\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        setSelectedUser: (state,action) => {\r\n            const {id} = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                userSelected: state.users[id]\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setSelectedUser } = userSlice.actions\r\nexport default userSlice.reducer","import { useState,useEffect, useRef, useContext } from \"react\"\r\nimport { Flex,Textarea,Button,Text } from \"@chakra-ui/react\";\r\nimport { AiFillSmile,AiFillLike } from \"react-icons/ai\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport { addMessage } from \"../../../store/message/reducer\";\r\nimport { sendMessage, setDefaultSelectedUser } from \"../../../store/message/action\";\r\n\r\nconst InputControl = () => {\r\n\r\n    const selectedUser = useSelector((state) => state.user.userSelected)\r\n    const [inputData, setInputData] = useState()\r\n    const [myID, setMyID] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSend = (() => {\r\n        dispatch(sendMessage(inputData, myID))\r\n        setInputData('')\r\n    })\r\n    \r\n    useEffect(() => {\r\n        dispatch(setDefaultSelectedUser())\r\n    },[dispatch])\r\n\r\n    const handleEnter = ((e) => {\r\n        inputData && handleSend();\r\n    })\r\n\r\n    return ( \r\n        <>\r\n        {selectedUser != null && <Flex mt='.5em' alignItems='center'>\r\n                        <Flex w='55em'>\r\n                            <InputEmoji\r\n                            onChange = {setInputData}\r\n                            onEnter = {handleEnter}\r\n                            value = {inputData}\r\n                            />\r\n                        </Flex>\r\n                        \r\n                        {inputData?\r\n                            <Button \r\n                            type='submit' \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            borderRadius= {3} \r\n                            _focus= {{boxShadow: 'none'}} \r\n                            onClick= {handleSend}\r\n                            > \r\n                                <Text> Send </Text> \r\n                            </Button> : \r\n                            <Button \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            _focus= {{boxShadow: 'none'}}\r\n                            > \r\n                                <AiFillLike size='2em' />\r\n                            </Button>}\r\n                    </Flex>}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default InputControl;","import { setSelectedUser } from \"../user/reducer\";\r\nimport { addMessage } from \"./reducer\";\r\n\r\n\r\nexport const sendMessage = (message, myID) => {\r\n    return (dispatch, getState) => {\r\n        const {\r\n            user: { userSelected },\r\n        } = getState();\r\n        \r\n        dispatch(addMessage({\r\n            userID: userSelected.id,\r\n            message: message,\r\n            myID: myID\r\n        }))\r\n    }\r\n}\r\n\r\nexport const setDefaultSelectedUser = () => {\r\n    return (dispatch, getState) => {\r\n      const {\r\n        user: { users }\r\n      } = getState();\r\n      dispatch(setSelectedUser(users['1']))\r\n    };\r\n  };","export const selectedUser = (state) => {\r\n    const {\r\n        user: { userSelected },\r\n        message: { messages }\r\n    } = state;\r\n\r\n    if(userSelected != null) {\r\n        return messages[userSelected.id]\r\n    }\r\n    return []\r\n}","import { Flex,Text } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectedUser } from \"../../../store/user/selector\";\r\n\r\nconst MessageItem = () => {\r\n    \r\n    const { userSelected } = useSelector((state) => state.user)\r\n    const message = useSelector(selectedUser)\r\n\r\n    return ( \r\n        <>\r\n        {(userSelected != null) && message.map((mes) => {\r\n            return  <Flex key={mes.id}>\r\n                    <Flex \r\n                    w='full'\r\n                    flexDir='column'\r\n                    >\r\n                      <Flex alignSelf='center'>  <Text m='1em 0' color='gray.500'> {mes.createAt} </Text> </Flex>\r\n                        <Flex \r\n                        alignSelf = {userSelected.id == mes.userID? 'flex-start' : 'flex-end'}\r\n                        > \r\n                            <Text \r\n                            w='fit'\r\n                            bg={userSelected.id == mes.userID? 'gray.200': 'blue.200'}\r\n                            p='.5em 1em'\r\n                            m='.5em 1em'\r\n                            borderRadius={15}\r\n                            > {mes.message} \r\n                            </Text> \r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n        })}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default MessageItem;","import MessageItem from \"./MessageItem\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { useEffect,useRef } from \"react\";\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst ListMessage = () => {\r\n\r\n    const { message } = useSelector((state) => state)\r\n    const { userSelected } = useSelector((state) => state.user)\r\n    const ref = useRef(null)\r\n\r\n    useEffect(() => {\r\n        ref.current.scrollIntoView()\r\n    },[message, userSelected])\r\n\r\n    return ( \r\n        <Flex \r\n        h='30em'\r\n        w='60em'\r\n        border='2px solid' \r\n        borderColor='gray'\r\n        flexDirection='column'\r\n        overflowY='scroll'\r\n        >\r\n            <MessageItem />\r\n            <div ref={ref} />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListMessage;","import InputControl from \"./InputControl\";\r\nimport ListMessage from \"./ListMessage\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst ChatBoard = () => {\r\n    return ( \r\n        <Flex flexDir='column' justifyContent='center' mr='.5em' bg='white' h='30em'>\r\n            <ListMessage />\r\n            <InputControl />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ChatBoard;","import { Flex,Button,Text } from \"@chakra-ui/react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSelectedUser } from \"../../../store/user/reducer\"\r\nconst ListUser = () => {\r\n\r\n    const { users, userSelected } = useSelector((state) => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSelectUser = (e) => {\r\n        const {id} = e.currentTarget\r\n        dispatch(setSelectedUser({id: id}))\r\n    }\r\n    console.log(userSelected)\r\n    return (\r\n        <Flex w='20em' bg='white' flexDirection='column'>\r\n                    {Object.values(users).map(user => {\r\n                        return <Button\r\n                                key = {user.id}\r\n                                onClick={handleSelectUser} \r\n                                id = {user.id}\r\n                                bg= {userSelected && userSelected.id == user.id? 'blue.500' : 'blue.200'}\r\n                                \r\n                                _focus={{boxShadow: 'none'}} \r\n                                p='2em' \r\n                                mb='1em' \r\n                                h='4em'\r\n                                >\r\n                                    <Text> {user.name} </Text>\r\n                                </Button>\r\n                    })}\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListUser;","import ChatBoard from \"./ChatBoard\";\r\nimport ListUser from \"./ListUser\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst Main = () => {\r\n\r\n    return ( \r\n        <Flex justifyContent='center' p='3em'>\r\n            <ChatBoard />\r\n            <ListUser />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default Main;","import Header from \"./Header\";\r\nimport Main from \"./Main/Main\";\r\n\r\nconst ChatApp = () => {\r\n    \r\n    return ( \r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ChatApp;","import { Input,FormControl,FormLabel,FormHelperText,Flex,Text,Center,Box,Button} from \"@chakra-ui/react\";\r\n\r\nconst forms = ['User Name' , 'Password']\r\nconst LoginForm = () => {\r\n    return (\r\n        <Center bg='gray.600' p='6em'>\r\n            <Flex boxSize='30em' bg='white'>\r\n                <FormControl bg='white.500' p='2em'>\r\n                    <Text fontSize='2.5em' align='center' fontWeight='bold' mb='1em'>Log In</Text>\r\n                    {forms.map((form) => {\r\n                        return <Box m='1em 0'>\r\n                                    <FormLabel> {form}</FormLabel> \r\n                                    <Input borderColor='gray'/>\r\n                                </Box>\r\n                    })}\r\n                    <Center>\r\n                        <Button borderColor='gray' type='submit' w='20%' mt='1em'> Log in</Button>\r\n                    </Center>\r\n                </FormControl>\r\n            </Flex>\r\n        </Center>\r\n     )\r\n}\r\n \r\nexport default LoginForm;","import ChatApp from \"./components/ChatApp/ChatApp\";\r\nimport { HashRouter as Router,Switch,Route } from \"react-router-dom\";\r\nimport LoginForm from \"./components/LoginForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n        <ChatApp />\r\n        </Route>\r\n        <Route path='/login'>\r\n          <LoginForm />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport userReducer from './user/reducer'\r\nimport messageReducer from './message/reducer'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n      user: userReducer,\r\n      message: messageReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from 'react-redux';\nimport { store } from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n      <ChakraProvider>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}