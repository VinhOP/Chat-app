{"version":3,"sources":["components/ChatApp/Header.js","contexts/ChatAppContext.js","features/users.js","components/ChatApp/Main/InputControl.js","components/ChatApp/Main/MessageItem.js","components/ChatApp/Main/ListMessage.js","components/ChatApp/Main/ChatBoard.js","features/userIndex.js","components/ChatApp/Main/ListUser.js","components/ChatApp/Main/Main.js","components/ChatApp/ChatApp.js","App.js","reportWebVitals.js","features/store.js","index.js"],"names":["Header","bg","justifyContent","alignItems","fontSize","align","fontWeight","ChatAppContext","createContext","initialStateValue","id","name","messages","uuidv4","mes","createAt","moment","Date","format","userID","usersSlice","createSlice","initialState","reducers","sendMessage","state","action","userIndex","payload","user","find","message","push","actions","InputControl","useSelector","value","useState","inputData","setInputData","myID","dispatch","useDispatch","useEffect","handleSend","mt","w","onChange","onEnter","e","type","m","borderRadius","_focus","boxShadow","onClick","size","MessageItem","users","console","log","length","map","flexDir","alignSelf","color","p","ListMessage","ref","useRef","current","scrollIntoView","h","border","borderColor","flexDirection","overflowY","ChatBoard","mr","userIndexSlice","update","ListUser","handleSelectUser","currentTarget","mb","Main","setUserIndex","Provider","ChatApp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","usersReducer","userIndexReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69bdfc72.chunk.js","sourcesContent":["import { Flex,Text,Button } from \"@chakra-ui/react\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return ( \r\n            <Flex bg='blue.200' justifyContent='space-between' alignItems='center'>\r\n                <Flex />\r\n                <Flex>\r\n                    <Text fontSize='2em' align='center' fontWeight='bold' justifyContent='center' > Chat App</Text>\r\n                </Flex>\r\n            </Flex>\r\n     );\r\n}\r\n \r\nexport default Header;","import { createContext } from \"react\";\r\n\r\nexport const ChatAppContext = createContext({})","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport moment, { Moment } from \"moment\";\r\n\r\nconst initialStateValue = [\r\n        {\r\n            id: 2,\r\n            name: 'Nam',\r\n            messages: [{\r\n                id: uuidv4(),\r\n                mes: 'OK con de',\r\n                createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                userID: 2,\r\n            }]\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Hoang',\r\n            messages: [\r\n                {\r\n                    id: uuidv4(),\r\n                    mes: 'hello AAASSS',\r\n                    createAt:  moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                    userID: 3,\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Tuyet',\r\n            messages: [\r\n                {\r\n                    id: uuidv4(),\r\n                    mes: 'TESTINGGGGGG',\r\n                    createAt:  moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                    userID: 4,\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\nexport const usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState: initialStateValue,\r\n    reducers: {\r\n        sendMessage: (state,action)  => {\r\n            const userIndex = action.payload.userIndex\r\n            const user = state.find(user => user.id == userIndex)\r\n\r\n            const message = {\r\n                id: uuidv4(),\r\n                mes: action.payload.mes,\r\n                createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                userID: action.payload.userID,\r\n            }\r\n            \r\n            user.messages.push(message)\r\n        },\r\n    }\r\n})\r\n\r\nexport const { sendMessage } = usersSlice.actions;\r\nexport default usersSlice.reducer;","\r\nimport { useState,useEffect, useRef, useContext } from \"react\"\r\nimport { Flex,Textarea,Button,Text } from \"@chakra-ui/react\";\r\nimport { AiFillSmile,AiFillLike } from \"react-icons/ai\";\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport { sendMessage } from \"../../../features/users\";\r\nimport InputEmoji from \"react-input-emoji\"\r\n\r\nconst InputControl = () => {\r\n\r\n    //const { userIndex } = useContext(ChatAppContext)\r\n    const userIndex = useSelector((state) => state.userIndex.value)\r\n\r\n    const [inputData, setInputData] = useState([])\r\n    const [myID, setMyID] = useState(1)\r\n    const [showEmoList, setShowEmoList] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setInputData('')\r\n    }, [userIndex])\r\n\r\n    const handleSend = (() => {\r\n        dispatch(sendMessage({\r\n            userIndex: userIndex,\r\n            mes: inputData,\r\n            userID: myID,\r\n        }))\r\n        setInputData('')\r\n    })\r\n\r\n    const handleEnter = ((e) => {\r\n        inputData && handleSend();\r\n    })\r\n    return ( \r\n        <>\r\n        {userIndex != null && <Flex mt='.5em' alignItems='center'>\r\n                        <Flex w='55em'>\r\n                            <InputEmoji\r\n                            onChange = {setInputData}\r\n                            onEnter = {handleEnter}\r\n                            value = {inputData}\r\n                            />\r\n                        </Flex>\r\n                        \r\n                        {inputData?\r\n                            <Button \r\n                            type='submit' \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            borderRadius= {3} \r\n                            _focus= {{boxShadow: 'none'}} \r\n                            onClick= {handleSend}\r\n                            > \r\n                                <Text> Send </Text> \r\n                            </Button> : \r\n                            <Button \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            _focus= {{boxShadow: 'none'}}\r\n                            > \r\n                                <AiFillLike size='2em' />\r\n                            </Button>}\r\n                    </Flex>}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default InputControl;","import { Flex,Text } from \"@chakra-ui/react\";\r\nimport { useContext } from \"react\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\";\r\n\r\n\r\nconst MessageItem = () => {\r\n    \r\n    //const { userIndex } = useContext(ChatAppContext)\r\n    const userIndex = useSelector((state) => state.userIndex.value)\r\n    const users = useSelector((state) => state.users)\r\n    const user = users.find(user => user.id == userIndex)\r\n    console.log(userIndex)\r\n    \r\n    return ( \r\n        <>\r\n        {(userIndex != null && user.messages.length > 0) && user.messages.map((mes) => {\r\n            return  <Flex key={mes.id}>\r\n                    <Flex \r\n                    w='full'\r\n                    flexDir='column'\r\n                    >\r\n                      <Flex alignSelf='center'>  <Text m='1em 0' color='gray.500'> {mes.createAt} </Text> </Flex>\r\n                        <Flex \r\n                        alignSelf = {user.id == mes.userID? 'flex-start' : 'flex-end' }\r\n                        > \r\n                            <Text \r\n                            w='fit'\r\n                            bg={user.id == mes.userID? 'gray.200': 'blue.200'}\r\n                            p='.5em 1em'\r\n                            m='.5em 1em'\r\n                            borderRadius={15}\r\n                            > {mes.mes} \r\n                            </Text> \r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n        })}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default MessageItem;","import MessageItem from \"./MessageItem\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { useEffect,useRef } from \"react\";\r\nimport { useContext } from \"react/cjs/react.development\";\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\";\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst ListMessage = () => {\r\n\r\n    const users = useSelector((state) => state.users)\r\n    const ref = useRef(null)\r\n\r\n    useEffect(() => {\r\n        ref.current.scrollIntoView()\r\n    },[users])\r\n\r\n    return ( \r\n        <Flex \r\n        h='30em'\r\n        w='60em'\r\n        border='2px solid' \r\n        borderColor='gray'\r\n        flexDirection='column'\r\n        overflowY='scroll'\r\n        >\r\n            <MessageItem />\r\n            <div ref={ref} />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListMessage;","import InputControl from \"./InputControl\";\r\nimport ListMessage from \"./ListMessage\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst ChatBoard = () => {\r\n    return ( \r\n        <Flex flexDir='column' justifyContent='center' mr='.5em' bg='white' h='30em'>\r\n            <ListMessage />\r\n            <InputControl />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ChatBoard;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userIndexSlice = createSlice({\r\n    name: 'userIndex',\r\n    initialState: {value: null},    \r\n    reducers: {\r\n        update: (state,action) => {\r\n            state.value = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const { update } = userIndexSlice.actions\r\nexport default userIndexSlice.reducer","import { Flex,Button,Text } from \"@chakra-ui/react\"\r\nimport { useContext, useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\"\r\nimport userIndex, { update } from '../../../features/userIndex'\r\n\r\nconst ListUser = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    //const { setUserIndex } = useContext(ChatAppContext)\r\n    const users = useSelector((state) => state.users)\r\n\r\n    const handleSelectUser = (e) => {\r\n        const {id} = e.currentTarget\r\n        //setUserIndex(id)\r\n        dispatch(update(id))\r\n    }\r\n\r\n    return ( \r\n        <Flex w='20em' bg='white' flexDirection='column'>\r\n                    {users.map(user => {\r\n                        return <Button \r\n                                key= {user.id}\r\n                                onClick={handleSelectUser} \r\n                                id = {user.id}\r\n                                bg='blue.200' \r\n                                _focus={{boxShadow: 'none'}} \r\n                                p='2em' \r\n                                mb='1em' \r\n                                h='4em'\r\n                                >\r\n                                    <Text> {user.name} </Text>\r\n                                </Button>\r\n                    })}\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListUser;","import ChatBoard from \"./ChatBoard\";\r\nimport ListUser from \"./ListUser\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\";\r\n\r\nconst Main = () => {\r\n\r\n    const [userIndex, setUserIndex] = useState()\r\n\r\n    return ( \r\n        <Flex justifyContent='center' p='3em'>\r\n            <ChatAppContext.Provider value={{setUserIndex, userIndex}}>\r\n                <ChatBoard />\r\n                <ListUser />\r\n            </ChatAppContext.Provider>\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default Main;","import Header from \"./Header\";\r\nimport Main from \"./Main/Main\";\r\n\r\nconst ChatApp = () => {\r\n    \r\n    return ( \r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ChatApp;","import ChatApp from \"./components/ChatApp/ChatApp\";\r\n//import { BrowserRouter as Router,Switch,Route } from \"react-router-dom\";\r\n//import LoginForm from \"./components/LoginForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChatApp />\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport usersReducer from './users'\r\nimport userIndexReducer from './userIndex'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n      users: usersReducer,\r\n      userIndex: userIndexReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from 'react-redux';\nimport { store } from './features/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <ChakraProvider>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}