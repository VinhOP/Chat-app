{"version":3,"sources":["components/ChatApp/Header.js","store/message/reducer.js","components/ChatApp/Main/InputControl.js","store/message/action.js","components/ChatApp/Main/MessageItem.js","components/ChatApp/Main/ListMessage.js","components/ChatApp/Main/ChatBoard.js","store/user/reducer.js","components/ChatApp/Main/ListUser.js","contexts/ChatAppContext.js","components/ChatApp/Main/Main.js","components/ChatApp/ChatApp.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["Header","bg","justifyContent","alignItems","fontSize","align","fontWeight","initialState","messages","id","uuidv4","message","createAt","moment","Date","format","userID","messageSlice","createSlice","name","reducers","addMessage","state","action","payload","myID","newMessage","actions","InputControl","selectedUser","useSelector","user","userSelected","useState","inputData","setInputData","dispatch","useDispatch","handleSend","getState","sendMessage","mt","w","onChange","onEnter","e","value","type","m","borderRadius","_focus","boxShadow","onClick","size","MessageItem","map","mes","flexDir","alignSelf","color","p","ListMessage","ref","useRef","useEffect","current","scrollIntoView","h","border","borderColor","flexDirection","overflowY","ChatBoard","mr","userSlice","users","setSelectedUser","ListUser","handleSelectUser","currentTarget","console","log","Object","values","mb","ChatAppContext","createContext","Main","userIndex","setUserIndex","Provider","ChatApp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","messageReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.884c0e6b.chunk.js","sourcesContent":["import { Flex,Text,Button } from \"@chakra-ui/react\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return ( \r\n            <Flex bg='blue.200' justifyContent='center' alignItems='center'>\r\n                <Flex />\r\n                <Flex>\r\n                    <Text fontSize='2em' align='center' fontWeight='bold' > Chat App</Text>\r\n                </Flex>\r\n            </Flex>\r\n     );\r\n}\r\n \r\nexport default Header;","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport moment from \"moment\"\r\n\r\nconst initialState = {\r\n    messages: {\r\n        1: [{\r\n            id: uuidv4(),\r\n            message: 'OK con de',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 1\r\n        }],\r\n        2: [{\r\n            id: uuidv4(),\r\n            message: 'hello AAASSS',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 2\r\n        }],\r\n        3: [{\r\n            id: uuidv4(),\r\n            message: 'TESTINGGGGGG',\r\n            createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n            userID: 3\r\n        }]\r\n    }\r\n}\r\n\r\nexport const messageSlice = createSlice({\r\n    name: \"message\",\r\n    initialState,\r\n    reducers: {\r\n        addMessage: (state,action) => {\r\n            const { userID, myID, message } = action.payload\r\n            const newMessage = {\r\n                id: uuidv4(),\r\n                message: message,\r\n                createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                userID: myID\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [userID]: [...state.messages[userID], newMessage]\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addMessage } = messageSlice.actions\r\nexport default messageSlice.reducer","import { useState,useEffect, useRef, useContext } from \"react\"\r\nimport { Flex,Textarea,Button,Text } from \"@chakra-ui/react\";\r\nimport { AiFillSmile,AiFillLike } from \"react-icons/ai\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport { addMessage } from \"../../../store/message/reducer\";\r\nimport { sendMessage } from \"../../../store/message/action\";\r\n\r\nconst InputControl = () => {\r\n\r\n    const selectedUser = useSelector((state) => state.user.userSelected)\r\n    const [inputData, setInputData] = useState()\r\n    const [myID, setMyID] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSend = (() => {\r\n        dispatch(sendMessage(inputData, myID))\r\n        setInputData('')\r\n    })\r\n    \r\n    const handleEnter = ((e) => {\r\n        inputData && handleSend();\r\n    })\r\n\r\n    return ( \r\n        <>\r\n        {selectedUser != null && <Flex mt='.5em' alignItems='center'>\r\n                        <Flex w='55em'>\r\n                            <InputEmoji\r\n                            onChange = {setInputData}\r\n                            onEnter = {handleEnter}\r\n                            value = {inputData}\r\n                            />\r\n                        </Flex>\r\n                        \r\n                        {inputData?\r\n                            <Button \r\n                            type='submit' \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            borderRadius= {3} \r\n                            _focus= {{boxShadow: 'none'}} \r\n                            onClick= {handleSend}\r\n                            > \r\n                                <Text> Send </Text> \r\n                            </Button> : \r\n                            <Button \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            _focus= {{boxShadow: 'none'}}\r\n                            > \r\n                                <AiFillLike size='2em' />\r\n                            </Button>}\r\n                    </Flex>}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default InputControl;","import { addMessage } from \"./reducer\";\r\n\r\n\r\nexport const sendMessage = (message, myID) => {\r\n    return (dispatch, getState) => {\r\n        const {\r\n            user: { userSelected },\r\n        } = getState();\r\n        \r\n        dispatch(addMessage({\r\n            userID: userSelected.id,\r\n            message: message,\r\n            myID: myID\r\n        }))\r\n    }\r\n}","import { Flex,Text } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst MessageItem = () => {\r\n    \r\n    const { userSelected }= useSelector((state) => state.user)\r\n    const message = useSelector((state) => state.message)\r\n\r\n    return ( \r\n        <>\r\n        {(userSelected != null) && message.messages[userSelected.id].map((mes) => {\r\n            return  <Flex key={mes.id}>\r\n                    <Flex \r\n                    w='full'\r\n                    flexDir='column'\r\n                    >\r\n                      <Flex alignSelf='center'>  <Text m='1em 0' color='gray.500'> {mes.createAt} </Text> </Flex>\r\n                        <Flex \r\n                        alignSelf = {userSelected.id == mes.userID? 'flex-start' : 'flex-end'}\r\n                        > \r\n                            <Text \r\n                            w='fit'\r\n                            bg={userSelected.id == mes.userID? 'gray.200': 'blue.200'}\r\n                            p='.5em 1em'\r\n                            m='.5em 1em'\r\n                            borderRadius={15}\r\n                            > {mes.message} \r\n                            </Text> \r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n        })}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default MessageItem;","import MessageItem from \"./MessageItem\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { useEffect,useRef } from \"react\";\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst ListMessage = () => {\r\n\r\n    const { message } = useSelector((state) => state)\r\n    const { userSelected } = useSelector((state) => state.user)\r\n    const ref = useRef(null)\r\n\r\n    useEffect(() => {\r\n        ref.current.scrollIntoView()\r\n    },[message, userSelected])\r\n\r\n    return ( \r\n        <Flex \r\n        h='30em'\r\n        w='60em'\r\n        border='2px solid' \r\n        borderColor='gray'\r\n        flexDirection='column'\r\n        overflowY='scroll'\r\n        >\r\n            <MessageItem />\r\n            <div ref={ref} />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListMessage;","import InputControl from \"./InputControl\";\r\nimport ListMessage from \"./ListMessage\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst ChatBoard = () => {\r\n    return ( \r\n        <Flex flexDir='column' justifyContent='center' mr='.5em' bg='white' h='30em'>\r\n            <ListMessage />\r\n            <InputControl />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ChatBoard;","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n    users: {\r\n        1: {\r\n            id: 1,\r\n            name: 'Nam',\r\n        },\r\n        2: {\r\n            id: 2,\r\n            name: 'Hoang',\r\n        },\r\n        3: {\r\n            id: 3,\r\n            name: 'Tuyet',\r\n        },\r\n    },\r\n    userSelected: null\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        setSelectedUser: (state,action) => {\r\n            const {id} = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                userSelected: state.users[id]\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setSelectedUser } = userSlice.actions\r\nexport default userSlice.reducer","import { Flex,Button,Text } from \"@chakra-ui/react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSelectedUser } from \"../../../store/user/reducer\"\r\nconst ListUser = () => {\r\n\r\n    const { users, userSelected } = useSelector((state) => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSelectUser = (e) => {\r\n        const {id} = e.currentTarget\r\n        dispatch(setSelectedUser({id: id}))\r\n    }\r\n    console.log(userSelected)\r\n    return (\r\n        <Flex w='20em' bg='white' flexDirection='column'>\r\n                    {Object.values(users).map(user => {\r\n                        return <Button\r\n                                key = {user.id}\r\n                                onClick={handleSelectUser} \r\n                                id = {user.id}\r\n                                bg= {userSelected && userSelected.id == user.id? 'blue.500' : 'blue.200'}\r\n                                \r\n                                _focus={{boxShadow: 'none'}} \r\n                                p='2em' \r\n                                mb='1em' \r\n                                h='4em'\r\n                                >\r\n                                    <Text> {user.name} </Text>\r\n                                </Button>\r\n                    })}\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListUser;","import { createContext } from \"react\";\r\n\r\nexport const ChatAppContext = createContext({})","import ChatBoard from \"./ChatBoard\";\r\nimport ListUser from \"./ListUser\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\nimport { ChatAppContext } from \"../../../contexts/ChatAppContext\";\r\n\r\nconst Main = () => {\r\n\r\n    const [userIndex, setUserIndex] = useState()\r\n\r\n    return ( \r\n        <Flex justifyContent='center' p='3em'>\r\n            <ChatAppContext.Provider value={{setUserIndex, userIndex}}>\r\n                <ChatBoard />\r\n                <ListUser />\r\n            </ChatAppContext.Provider>\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default Main;","import Header from \"./Header\";\r\nimport Main from \"./Main/Main\";\r\n\r\nconst ChatApp = () => {\r\n    \r\n    return ( \r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ChatApp;","import ChatApp from \"./components/ChatApp/ChatApp\";\r\n//import { BrowserRouter as Router,Switch,Route } from \"react-router-dom\";\r\n//import LoginForm from \"./components/LoginForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChatApp />\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport userReducer from './user/reducer'\r\nimport messageReducer from './message/reducer'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n      user: userReducer,\r\n      message: messageReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from 'react-redux';\nimport { store } from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n      <ChakraProvider>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}