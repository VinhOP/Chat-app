{"version":3,"sources":["components/ChatApp/Header.js","store/user/reducer.js","store/message/reducer.js","components/ChatApp/Main/InputControl.js","store/message/action.js","store/user/selector.js","components/ChatApp/Main/MessageItem.js","components/ChatApp/Main/ListMessage.js","components/ChatApp/Main/ChatBoard.js","components/ChatApp/Main/ListUser.js","components/ChatApp/Main/Main.js","components/ChatApp/ChatApp.js","components/LoginForm.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["Header","bg","justifyContent","alignItems","p","fontSize","align","fontWeight","to","target","mr","userSlice","createSlice","name","initialState","users","id","userSelected","myID","reducers","setSelectedUser","state","action","payload","actions","messages","uuidv4","message","deleted","createAt","moment","Date","format","userID","messageSlice","addMessage","newMessage","deleteMes","mesID","map","msg","InputControl","useSelector","user","useState","inputData","setInputData","dispatch","useDispatch","handleSend","getState","sendMessage","useEffect","mt","w","onChange","onEnter","e","value","type","m","borderRadius","_focus","boxShadow","onClick","size","selectedUser","MessageItem","mesSelected","setMesSelected","showList","setShowList","handleMouseLeave","mes","onMouseLeave","flexDir","alignSelf","color","pos","onMouseEnter","icon","zIndex","bottom","boxSize","maxW","border","fontStyle","ListMessage","ref","useRef","current","scrollIntoView","h","borderColor","flexDirection","overflowY","ChatBoard","ListUser","handleSelectUser","currentTarget","Object","values","mb","Main","ChatApp","LoginForm","bgRepeat","bgSize","bgImg","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","messageReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAiBeA,EAdA,WACX,OACQ,eAAC,IAAD,CAAMC,GAAG,WAAWC,eAAe,gBAAgBC,WAAW,SAASC,EAAE,SAAzE,UACI,cAAC,IAAD,IACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAMC,SAAS,MAAMC,MAAM,SAASC,WAAW,OAA/C,yBAEJ,cAAC,IAAD,UACG,eAAC,IAAD,CAAMC,GAAG,SAASC,OAAO,SAAzB,cAAmC,cAAC,IAAD,CAAQC,GAAG,MAAX,qBAAnC,a,+CCUNC,EAAYC,YAAY,CACjCC,KAAM,OACNC,aArBiB,CACjBC,MAAO,CACH,EAAG,CACCC,GAAI,EACJH,KAAM,OAEV,EAAG,CACCG,GAAI,EACJH,KAAM,SAEV,EAAG,CACCG,GAAI,EACJH,KAAM,UAGdI,aAAc,KACdC,KAAM,GAMNC,SAAU,CACNC,gBAAiB,SAACC,EAAMC,GACpB,IAAON,EAAMM,EAAOC,QAAbP,GAEP,OAAO,2BACAK,GADP,IAEIJ,aAAcI,EAAMN,MAAMC,SAM3BI,EAAoBT,EAAUa,QAA9BJ,gBACAT,IAAf,Q,yCCjCMG,EAAe,CACjBW,SAAU,CACV,EAAG,CAAC,CACAT,GAAIU,cACJC,QAAS,YACTC,SAAS,EACTC,SAAUC,IAAO,IAAIC,MAAQC,OAAO,mBACpCC,OAAQ,IAEZ,EAAG,CAAC,CACAjB,GAAIU,cACJC,QAAS,eACTC,SAAS,EACTC,SAAUC,IAAO,IAAIC,MAAQC,OAAO,mBACpCC,OAAQ,IAEZ,EAAG,CAAC,CACAjB,GAAIU,cACJC,QAAS,eACTC,SAAS,EACTC,SAAUC,IAAO,IAAIC,MAAQC,OAAO,mBACpCC,OAAQ,MAKHC,EAAetB,YAAY,CACpCC,KAAM,UACNC,eACAK,SAAU,CACNgB,WAAY,SAACd,EAAMC,GACf,MAAkCA,EAAOC,QAAjCU,EAAR,EAAQA,OAAQf,EAAhB,EAAgBA,KAAMS,EAAtB,EAAsBA,QAChBS,EAAa,CACfpB,GAAIU,cACJC,QAASA,EACTC,SAAS,EACTC,SAAUC,IAAO,IAAIC,MAAQC,OAAO,mBACpCC,OAAQf,GAGZ,OAAO,2BACAG,GADP,IAEII,SAAS,2BACFJ,EAAMI,UADL,kBAEHQ,EAFG,sBAEUZ,EAAMI,SAASQ,IAFzB,CAEkCG,SAKlDC,UAAW,SAAChB,EAAMC,GACd,MAAwBA,EAAOC,QAAxBU,EAAP,EAAOA,OAAQK,EAAf,EAAeA,MACf,OAAO,2BACAjB,GADP,IAEII,SAAS,2BACFJ,EAAMI,UADL,kBAEHQ,EAASZ,EAAMI,SAASQ,GAAQM,KAAI,SAAAC,GACjC,OAAGF,GAASE,EAAIxB,GACL,2BACAwB,GADP,IAEIZ,SAAS,IAGVY,aAQxB,EAAkCN,EAAaV,QAAvCW,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,UACZH,IAAf,QCfeO,EArDM,WAEjB,MAA+BC,aAAY,SAACrB,GAAD,OAAWA,EAAMsB,QAApD1B,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,KACtB,EAAkC0B,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAWC,cAEXC,EAAc,WAChBF,ECXmB,SAACpB,EAAST,GACjC,OAAO,SAAC6B,EAAUG,GACd,IACYjC,EACRiC,IADAP,KAAQ1B,aAGZ8B,EAASZ,EAAW,CAChBF,OAAQhB,EAAaD,GACrBW,QAASA,EACTT,KAAMA,MDEDiC,CAAYN,EAAW3B,IAChC4B,EAAa,KAGjBM,qBAAU,WACNL,GCYG,SAACA,EAAUG,GAChB,IACUnC,EACNmC,IADFP,KAAQ5B,MAEVgC,EAAS3B,EAAgBL,EAAM,UDf/B,CAACgC,IAMH,OACI,mCACiB,MAAhB9B,GAAwB,eAAC,IAAD,CAAMoC,GAAG,OAAOlD,WAAW,SAA3B,UACT,cAAC,IAAD,CAAMmD,EAAE,OAAR,SACI,cAAC,IAAD,CACAC,SAAYT,EACZU,QAVH,SAACC,GAClBZ,GAAaI,KAUOS,MAASb,MAIZA,EACG,cAAC,IAAD,CACAc,KAAK,SACLC,EAAE,SACF3D,GAAG,WACH4D,aAAe,EACfC,OAAS,CAACC,UAAW,QACrBC,QAAUf,EANV,SAQI,cAAC,IAAD,uBAEJ,cAAC,IAAD,CACAW,EAAE,SACF3D,GAAG,WACH6D,OAAS,CAACC,UAAW,QAHrB,SAKI,cAAC,IAAD,CAAYE,KAAK,gB,SErDpCC,EAAe,SAAC7C,GACzB,IACYJ,EAERI,EAFAsB,KAAQ1B,aACGQ,EACXJ,EADAM,QAAWF,SAGf,OAAmB,MAAhBR,EACQQ,EAASR,EAAaD,IAE1B,ICqEImD,EAtEK,WAEhB,MAAsCvB,qBAAtC,mBAAOwB,EAAP,KAAoBC,EAApB,KAEA,EAA8B3B,aAAY,SAACrB,GAAD,OAAWA,EAAMsB,QAAnD1B,EAAR,EAAQA,aAAaC,EAArB,EAAqBA,KACrB,EAAgC0B,oBAAS,GAAzC,mBAAO0B,EAAP,KAAiBC,EAAjB,KACM5C,EAAUe,YAAYwB,GAEtBnB,EAAWC,cAEXwB,EAAmB,WACrBH,IACAE,GAAY,IAGhB,OACI,mCACkB,MAAhBtD,GAAyBU,EAAQY,KAAI,SAACkC,GACpC,OAAQ,cAAC,IAAD,CAAmBC,aAAcF,EAAjC,SACA,eAAC,IAAD,CACAlB,EAAE,OACFqB,QAAQ,SAFR,UAIE,eAAC,IAAD,CAAMC,UAAU,SAAhB,eAA2B,eAAC,IAAD,CAAMhB,EAAE,QAAQiB,MAAM,WAAtB,cAAmCJ,EAAI5C,SAAvC,OAA3B,OACE,eAAC,IAAD,CACA3B,eAAkBe,EAAaD,IAAMyD,EAAIxC,OAAQ,aAAe,WAChE2B,EAAI,MACJkB,IAAI,WACJC,aAAc,kBAAMV,EAAeI,EAAIzD,KAJvC,UAOOyD,EAAIxC,QAAUf,GAAUkD,GAAeK,EAAIzD,KAAQyD,EAAI7C,SAC1D,eAAC,IAAD,CAAM+C,QAAQ,iBAAiBrB,EAAE,MAAMnD,WAAW,SAAlD,UACI,cAAC,IAAD,CACA6E,KAAQ,cAAC,IAAD,CAAef,KAAK,UAC5BX,EAAI,MACJrD,GAAIqE,EAAU,WAAa,OAC3BR,OAAQ,CAACC,UAAW,QACpBC,QAAS,kBAAMO,GAAaD,MAG3BA,GACD,cAAC,IAAD,CACAW,OAAQ,EACRH,IAAI,WACJI,OAAO,QACPlB,QAAS,kBAAMjB,GFrChBT,EEqCuCmC,EAAIzD,GFpClE,SAAC+B,EAASG,GACd,IACSjC,EACLiC,IADFP,KAAO1B,aAGT8B,EAASV,EAAU,CACjBJ,OAAQhB,EAAaD,GACrBsB,MAAOA,QARiB,IAACA,GEiCC,wBASJ,eAAC,IAAD,CACA6C,QAAQ,cACRC,KAAK,OACLnF,GAAIgB,EAAaD,IAAMyD,EAAIxC,OAAQ,WAAawC,EAAI7C,QAAS,OAAS,WACtEyD,OAAQZ,EAAI7C,QAAS,YAAc,OACnC0D,UAAWb,EAAI7C,QAAS,SAAW,OACnCiD,MAAOJ,EAAI7C,QAAS,WAAa,OACjCxB,EAAE,WACFyD,aAAc,GARd,cASGY,EAAI7C,QAAS,4DAA4B6C,EAAI9C,kBA1C7C8C,EAAIzD,UCIpBuE,EAzBK,WAEhB,IAAQ5D,EAAYe,aAAY,SAACrB,GAAD,OAAWA,KAAnCM,QACAV,EAAiByB,aAAY,SAACrB,GAAD,OAAWA,EAAMsB,QAA9C1B,aACFuE,EAAMC,iBAAO,MAMnB,OAJArC,qBAAU,WACNoC,EAAIE,QAAQC,mBACd,CAAChE,EAASV,IAGR,eAAC,IAAD,CACA2E,EAAE,OACFtC,EAAE,OACF+B,OAAO,YACPQ,YAAY,OACZC,cAAc,SACdC,UAAU,SANV,UAQI,cAAC,EAAD,IACA,qBAAKP,IAAKA,QCZPQ,EATG,WACd,OACI,eAAC,IAAD,CAAMrB,QAAQ,SAASzE,eAAe,SAASQ,GAAG,OAAOT,GAAG,QAAQ2F,EAAE,OAAtE,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QC0BGK,EA/BE,WAEb,MAAgCvD,aAAY,SAACrB,GAAD,OAAWA,EAAMsB,QAArD5B,EAAR,EAAQA,MAAOE,EAAf,EAAeA,aACT8B,EAAWC,cAEXkD,EAAmB,SAACzC,GACtB,IAAOzC,EAAMyC,EAAE0C,cAARnF,GACP+B,EAAS3B,EAAgB,CAACJ,GAAIA,MAGlC,OACI,cAAC,IAAD,CAAMsC,EAAE,OAAOrD,GAAG,QAAQ6F,cAAc,SAAxC,SACaM,OAAOC,OAAOtF,GAAOwB,KAAI,SAAAI,GACtB,OAAO,cAAC,IAAD,CAECqB,QAASkC,EACTlF,GAAM2B,EAAK3B,GACXf,GAAKgB,GAAgBA,EAAaD,IAAM2B,EAAK3B,GAAI,WAAa,WAE9D8C,OAAQ,CAACC,UAAW,QACpB3D,EAAE,MACFkG,GAAG,MACHV,EAAE,MATH,SAWK,eAAC,IAAD,eAAQjD,EAAK9B,KAAb,QAVG8B,EAAK3B,UCH7BuF,EAVF,WAET,OACI,eAAC,IAAD,CAAMrG,eAAe,SAASE,EAAE,MAAhC,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCOGoG,EAZC,WAEZ,OACI,cAAC,IAAD,CAAMtG,eAAe,SAArB,SACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,U,2CCWDuG,EAlBG,WACd,OACI,cAAC,IAAD,CAAQrG,EAAE,MAAMsG,SAAS,YAAYC,OAAO,QAAQC,MAAM,0EAA1D,SACI,cAAC,IAAD,CAAMzB,QAAQ,OAAOlF,GAAG,QAAxB,SACI,eAAC,IAAD,CAAaA,GAAG,YAAYG,EAAE,MAA9B,UACI,cAAC,IAAD,CAAMC,SAAS,QAAQC,MAAM,SAASC,WAAW,OAAO+F,GAAG,MAA3D,oBACI,cAAC,IAAD,0BACA,cAAC,IAAD,IACA,cAAC,IAAD,yBACJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAQrG,GAAG,WAAW4F,YAAY,OAAOlC,KAAK,SAASL,EAAE,MAAMD,GAAG,MAAlE,+BCMTwD,MAff,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACA,cAAC,EAAD,MAEA,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,YCAKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCHDQ,EAAQC,YAAe,CAChCC,QAAS,CACPhF,KAAMiF,EACNjG,QAASkG,KCCfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,UAIRQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.9af962ad.chunk.js","sourcesContent":["import { Flex,Text,Button } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return ( \r\n            <Flex bg='blue.200' justifyContent='space-between' alignItems='center' p='.5em 0'>\r\n                <Flex />\r\n                <Flex>\r\n                    <Text fontSize='2em' align='center' fontWeight='bold' > Chat App</Text>\r\n                </Flex>\r\n                <Flex>\r\n                   <Link to='/login' target='_blank'> <Button mr='2em'> Login </Button> </Link>\r\n                </Flex>\r\n            </Flex>\r\n     );\r\n}\r\n \r\nexport default Header;","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n    users: {\r\n        1: {\r\n            id: 1,\r\n            name: 'Nam',\r\n        },\r\n        2: {\r\n            id: 2,\r\n            name: 'Hoang',\r\n        },\r\n        3: {\r\n            id: 3,\r\n            name: 'Tuyet',\r\n        },\r\n    },\r\n    userSelected: null,\r\n    myID: 0\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        setSelectedUser: (state,action) => {\r\n            const {id} = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                userSelected: state.users[id]\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setSelectedUser } = userSlice.actions\r\nexport default userSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport moment from \"moment\"\r\n\r\nconst initialState = {\r\n    messages: {\r\n    1: [{\r\n        id: uuidv4(),\r\n        message: 'OK con de',\r\n        deleted: false,\r\n        createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n        userID: 1\r\n    }],\r\n    2: [{\r\n        id: uuidv4(),\r\n        message: 'hello AAASSS',\r\n        deleted: false,\r\n        createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n        userID: 2\r\n    }],\r\n    3: [{\r\n        id: uuidv4(),\r\n        message: 'TESTINGGGGGG',\r\n        deleted: false,\r\n        createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n        userID: 3\r\n    }],\r\n}\r\n}\r\n\r\nexport const messageSlice = createSlice({\r\n    name: \"message\",\r\n    initialState,\r\n    reducers: {\r\n        addMessage: (state,action) => {\r\n            const { userID, myID, message } = action.payload\r\n            const newMessage = {\r\n                id: uuidv4(),\r\n                message: message,\r\n                deleted: false,\r\n                createAt: moment(new Date()).format(\"dddd, h:mm:ss a\"),\r\n                userID: myID\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [userID]: [...state.messages[userID], newMessage]\r\n                }\r\n            }\r\n        },\r\n\r\n        deleteMes: (state,action) => {\r\n            const {userID, mesID} = action.payload\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [userID]: state.messages[userID].map(msg => {\r\n                        if(mesID == msg.id) {\r\n                            return {\r\n                                ...msg,\r\n                                deleted: true\r\n                            }\r\n                        }\r\n                        return msg\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addMessage, deleteMes } = messageSlice.actions\r\nexport default messageSlice.reducer","import { useState,useEffect } from \"react\";\r\nimport { Flex,Button,Text } from \"@chakra-ui/react\";\r\nimport { AiFillLike } from \"react-icons/ai\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport { sendMessage, setDefaultSelectedUser } from \"../../../store/message/action\";\r\n\r\nconst InputControl = () => {\r\n\r\n    const { userSelected, myID } = useSelector((state) => state.user)\r\n    const [inputData, setInputData] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSend = (() => {\r\n        dispatch(sendMessage(inputData, myID))\r\n        setInputData('')\r\n    })\r\n    \r\n    useEffect(() => {\r\n        dispatch(setDefaultSelectedUser())\r\n    },[dispatch])\r\n\r\n    const handleEnter = ((e) => {\r\n        inputData && handleSend();\r\n    })\r\n\r\n    return ( \r\n        <>\r\n        {userSelected != null && <Flex mt='.5em' alignItems='center'>\r\n                        <Flex w='55em'>\r\n                            <InputEmoji\r\n                            onChange = {setInputData}\r\n                            onEnter = {handleEnter}\r\n                            value = {inputData}\r\n                            />\r\n                        </Flex>\r\n                        \r\n                        {inputData?\r\n                            <Button \r\n                            type='submit' \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            borderRadius= {3} \r\n                            _focus= {{boxShadow: 'none'}} \r\n                            onClick= {handleSend}\r\n                            > \r\n                                <Text> Send </Text> \r\n                            </Button> : \r\n                            <Button \r\n                            m='0 .5em' \r\n                            bg='gray.300' \r\n                            _focus= {{boxShadow: 'none'}}\r\n                            > \r\n                                <AiFillLike size='2em' />\r\n                            </Button>}\r\n                    </Flex>}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default InputControl;","import { setSelectedUser } from \"../user/reducer\";\r\nimport { addMessage, deleteMes } from \"./reducer\";\r\n\r\nexport const sendMessage = (message, myID) => {\r\n    return (dispatch, getState) => {\r\n        const {\r\n            user: { userSelected },\r\n        } = getState();\r\n        \r\n        dispatch(addMessage({\r\n            userID: userSelected.id,\r\n            message: message,\r\n            myID: myID\r\n        }))\r\n    }\r\n}\r\n\r\nexport const deleteMessage = ((mesID) => {\r\n  return(dispatch,getState) => {\r\n    const {\r\n      user: {userSelected},\r\n    } = getState()\r\n\r\n    dispatch(deleteMes({\r\n      userID: userSelected.id,\r\n      mesID: mesID\r\n    }))\r\n  }\r\n})\r\n\r\nexport const setDefaultSelectedUser = () => {\r\n    return (dispatch, getState) => {\r\n      const {\r\n        user: { users }\r\n      } = getState();\r\n      dispatch(setSelectedUser(users['1']))\r\n    };\r\n  };","export const selectedUser = (state) => {\r\n    const {\r\n        user: { userSelected },\r\n        message: { messages }\r\n    } = state;\r\n\r\n    if(userSelected != null) {\r\n        return messages[userSelected.id]\r\n    }\r\n    return []\r\n}","import { Flex,Text,Button, IconButton } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { AiOutlineMore } from \"react-icons/ai\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteMessage } from \"../../../store/message/action\";\r\n\r\nimport { selectedUser } from \"../../../store/user/selector\";\r\n\r\nconst MessageItem = () => {\r\n\r\n    const [mesSelected, setMesSelected] = useState()\r\n    \r\n    const { userSelected,myID } = useSelector((state) => state.user)\r\n    const [showList, setShowList] = useState(false)\r\n    const message = useSelector(selectedUser)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleMouseLeave = () => {\r\n        setMesSelected()\r\n        setShowList(false)\r\n    }\r\n\r\n    return ( \r\n        <>\r\n        {(userSelected != null) && message.map((mes) => {\r\n            return  <Flex key={mes.id} onMouseLeave={handleMouseLeave}>\r\n                    <Flex \r\n                    w='full'\r\n                    flexDir='column'\r\n                    >\r\n                      <Flex alignSelf='center'>  <Text m='1em 0' color='gray.500'> {mes.createAt} </Text> </Flex>\r\n                        <Flex \r\n                        justifyContent = {userSelected.id == mes.userID? 'flex-start' : 'flex-end'}\r\n                        m = '1em'\r\n                        pos='relative'\r\n                        onMouseEnter={() => setMesSelected(mes.id)}\r\n                        \r\n                        >\r\n                            {((mes.userID == myID) && (mesSelected == mes.id) && !mes.deleted) && \r\n                            <Flex flexDir='column-reverse' w='4em' alignItems='center'>\r\n                                <IconButton\r\n                                icon = {<AiOutlineMore size='1.5em'/>}\r\n                                w = '1em'\r\n                                bg={showList? 'gray.100' : 'none'}\r\n                                _focus={{boxShadow: 'none'}}\r\n                                onClick={() => setShowList(!showList)}\r\n                                />\r\n\r\n                                {showList && \r\n                                <Button \r\n                                zIndex={1}\r\n                                pos='absolute'\r\n                                bottom='2.7em'\r\n                                onClick={() => dispatch(deleteMessage(mes.id))}\r\n                                > delete \r\n                                </Button>}\r\n                            </Flex>}\r\n                            \r\n                            <Text\r\n                            boxSize='fit-content'\r\n                            maxW='20em'\r\n                            bg={userSelected.id == mes.userID? 'gray.200': (mes.deleted? 'none' : 'blue.200')}\r\n                            border={mes.deleted? '1px solid' : 'none'}\r\n                            fontStyle={mes.deleted? 'italic' : 'none'}\r\n                            color={mes.deleted? 'gray.500' : 'none'}\r\n                            p='.5em 1em'\r\n                            borderRadius={15}\r\n                            > {mes.deleted? 'Tin nhắn đã được thu hồi': mes.message} \r\n                            </Text>\r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n        })}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default MessageItem;","import MessageItem from \"./MessageItem\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { useEffect,useRef} from \"react\";\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst ListMessage = () => {\r\n\r\n    const { message } = useSelector((state) => state)\r\n    const { userSelected } = useSelector((state) => state.user)\r\n    const ref = useRef(null)\r\n\r\n    useEffect(() => {\r\n        ref.current.scrollIntoView()\r\n    },[message, userSelected])\r\n\r\n    return ( \r\n        <Flex \r\n        h='30em'\r\n        w='60em'\r\n        border='2px solid' \r\n        borderColor='gray'\r\n        flexDirection='column'\r\n        overflowY='scroll'\r\n        >\r\n            <MessageItem />\r\n            <div ref={ref} />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListMessage;","import InputControl from \"./InputControl\";\r\nimport ListMessage from \"./ListMessage\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst ChatBoard = () => {\r\n    return ( \r\n        <Flex flexDir='column' justifyContent='center' mr='.5em' bg='white' h='30em'>\r\n            <ListMessage />\r\n            <InputControl />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ChatBoard;","import { Flex,Button,Text } from \"@chakra-ui/react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSelectedUser } from \"../../../store/user/reducer\"\r\nconst ListUser = () => {\r\n\r\n    const { users, userSelected } = useSelector((state) => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSelectUser = (e) => {\r\n        const {id} = e.currentTarget\r\n        dispatch(setSelectedUser({id: id}))\r\n    }\r\n    \r\n    return (\r\n        <Flex w='20em' bg='white' flexDirection='column'>\r\n                    {Object.values(users).map(user => {\r\n                        return <Button\r\n                                key = {user.id}\r\n                                onClick={handleSelectUser} \r\n                                id = {user.id}\r\n                                bg= {userSelected && userSelected.id == user.id? 'blue.500' : 'blue.200'}\r\n                                \r\n                                _focus={{boxShadow: 'none'}} \r\n                                p='2em' \r\n                                mb='1em' \r\n                                h='4em'\r\n                                >\r\n                                    <Text> {user.name} </Text>\r\n                                </Button>\r\n                    })}\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default ListUser;","import ChatBoard from \"./ChatBoard\";\r\nimport ListUser from \"./ListUser\";\r\nimport { Flex } from \"@chakra-ui/layout\";\r\n\r\nconst Main = () => {\r\n\r\n    return ( \r\n        <Flex justifyContent='center' p='3em'>\r\n            <ChatBoard />\r\n            <ListUser />\r\n        </Flex>\r\n     );\r\n}\r\n \r\nexport default Main;","import { Box, Flex } from \"@chakra-ui/layout\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main/Main\";\r\n\r\nconst ChatApp = () => {\r\n    \r\n    return (\r\n        <Flex justifyContent='center'>\r\n            <Box>\r\n                <Header />\r\n                <Main />\r\n            </Box>\r\n        </Flex> \r\n     );\r\n}\r\n \r\nexport default ChatApp;","import { Input,FormControl,FormLabel,FormHelperText,Flex,Text,Center,Box,Button} from \"@chakra-ui/react\";\r\n\r\nconst form = ['User Name' , 'Password']\r\nconst LoginForm = () => {\r\n    return (\r\n        <Center p='6em' bgRepeat='no-repeat' bgSize='cover' bgImg='https://i.pinimg.com/564x/6f/63/e9/6f63e9361712ddb1c9b1a03cead9eb5d.jpg'>\r\n            <Flex boxSize='30em' bg='white'>\r\n                <FormControl bg='white.500' p='2em'>\r\n                    <Text fontSize='2.5em' align='center' fontWeight='bold' mb='1em'>Log In</Text>\r\n                        <FormLabel> User name </FormLabel>\r\n                        <Input />\r\n                        <FormLabel> Password </FormLabel>\r\n                    <Center>\r\n                        <Button bg='gray.300' borderColor='gray' type='submit' w='20%' mt='1em'> Log in</Button>\r\n                    </Center>\r\n                </FormControl>\r\n            </Flex>\r\n        </Center>\r\n     )\r\n}\r\n \r\nexport default LoginForm;","import ChatApp from \"./components/ChatApp/ChatApp\";\r\nimport { HashRouter as Router,Switch,Route } from \"react-router-dom\";\r\nimport LoginForm from \"./components/LoginForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n        <ChatApp />\r\n        </Route>\r\n        <Route path='/login'>\r\n          <LoginForm />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport userReducer from './user/reducer'\r\nimport messageReducer from './message/reducer'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n      user: userReducer,\r\n      message: messageReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from 'react-redux';\nimport { store } from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n      <ChakraProvider>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}